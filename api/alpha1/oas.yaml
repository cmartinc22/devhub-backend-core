openapi: "3.0.0"
info:
  description: "The DevHub Application Registry OAS Spec (alpha1)"
  version: "alpha1"
  title: "DevHub Application Registry API"
  contact:
    email: "platform-developer-experience@deliveryhero.com"
servers:
  - url: "https://devhub-stg.deliveryhero.io"
    description: DevHub Application Registry Staging (test data)
  - url: "https://devhub.deliveryhero.io"
    description: DevHub Application Registry Production (live data)
  - url: "http://127.0.0.1:3000"
    description: DevHub Application Registry Local (local data)
components:
  securitySchemes:
    STS_Authorization:
      type: http
      scheme: bearer
      bearerFormat: JWT
    CF_Authorization:
      type: apiKey
      in: cookie
      name: CF_Authorization
security:
  - cookieAuth: ["CF_Authorization"]
  - bearerAuth: ["STS_Authorization"]
tags:
  - name: "health"
    description: "service info and health check"
  - name: "entities"
    description: "application registry/catalog"
paths:
  /alive:
    get:
      tags:
        - "health"
      summary: "Service health check, non 200 response means service not responding"
      description: ""
      operationId: "alive"
      responses:
        "200":
          description: "service ok"
          content:
            application/json:
              schema:
                type: "object"
                properties:
                  env:
                    type: "string"
                  version:
                    type: "string"
  /ready:
    get:
      tags:
        - "health"
      summary: "Pings database, non 200 response means not responding or not connected"
      description: ""
      operationId: "ready"
      responses:
        "200":
          description: "successful operation"
          content:
            application/json:
              schema:
                type: "string"
              example: "ok"
        "503":
          description: "failed operation"
          content:
            application/json:
              schema:
                type: "string"
              example: "not yet ready"
  /alpha1/entities/{id}:
    get:
      tags:
        - "entities"
      summary: "Get an entity"
      parameters:
        - in: path
          name: id
          schema:
            $ref: "schemas/entity-ref.json"
          required: true
          description: "kind:slug"
          example: "backendapp:developer-portal"
      responses:
        "200":
          description: "OK"
          content:
            application/json:
              schema:
                $ref: "schemas/any-entity.read.json"
            application/yaml:
              schema:
                $ref: "schemas/any-entity.read.json"
        "404":
          description: "Entity not found"
          content:
            application/json:
              schema:
                type: object
                properties:
                  messages:
                    type: array
                    example:
                      ["[handlers] entity group:developer-experience not found"]
                    items:
                      type: "string"
                    description: "the error messages"
                  code:
                    type: string
                    example: "NOT_FOUND"
            application/yaml:
              schema:
                type: object
                properties:
                  messages:
                    type: array
                    example:
                      ["[handlers] entity group:developer-experience not found"]
                    items:
                      type: "string"
                    description: "the error messages"
                  code:
                    type: string
                    example: "NOT_FOUND"
        "500":
          description: "Error"
          content:
            application/json:
              schema:
                type: object
                properties:
                  messages:
                    type: array
                    example:
                      ["ERROR[INTERNAL_SERVER_ERROR] [some error message]"]
                    items:
                      type: "string"
                    description: "the error messages"
                  code:
                    type: string
                    example: "INTERNAL_SERVER_ERROR"
            application/yaml:
              schema:
                type: object
                properties:
                  messages:
                    type: array
                    example:
                      ["ERROR[INTERNAL_SERVER_ERROR] [some error message]"]
                    items:
                      type: "string"
                    description: "the error messages"
                  code:
                    type: string
                    example: "INTERNAL_SERVER_ERROR"
    put:
      tags:
        - "entities"
      summary: "Create or full update an entity"
      parameters:
        - in: path
          name: id
          schema:
            $ref: "schemas/entity-ref.json"
          required: true
          description: "kind:slug"
          example: "backendapp:developer-portal"
      requestBody:
        description: "An Entity Spec"
        required: true
        content:
          application/json:
            schema:
              $ref: "schemas/any-entity-spec.write.json"
          application/yaml:
            schema:
              $ref: "schemas/any-entity-spec.write.json"
      responses:
        "200":
          description: "OK"
          content:
            application/json:
              schema:
                $ref: "schemas/any-entity.read.json"
            application/yaml:
              schema:
                $ref: "schemas/any-entity.read.json"
        "400":
          description: "Failed to patch"
          content:
            application/json:
              schema:
                type: object
                properties:
                  messages:
                    type: array
                    example: ["invalid spec for ..."]
                    items:
                      type: "string"
                    description: "the error messages"
                  code:
                    type: string
                    example: "INVALID_PARAMETERS"
            application/yaml:
              schema:
                type: object
                properties:
                  messages:
                    type: array
                    example: ["invalid spec for ..."]
                    items:
                      type: "string"
                    description: "the error messages"
                  code:
                    type: string
                    example: "INVALID_PARAMETERS"
        "500":
          description: "Error"
          content:
            application/json:
              schema:
                type: object
                properties:
                  messages:
                    type: array
                    example:
                      ["ERROR[INTERNAL_SERVER_ERROR] [some error message]"]
                    items:
                      type: "string"
                    description: "the error messages"
                  code:
                    type: string
                    example: "INTERNAL_SERVER_ERROR"
            application/yaml:
              schema:
                type: object
                properties:
                  messages:
                    type: array
                    example:
                      ["ERROR[INTERNAL_SERVER_ERROR] [some error message]"]
                    items:
                      type: "string"
                    description: "the error messages"
                  code:
                    type: string
                    example: "INTERNAL_SERVER_ERROR"
    patch:
      tags:
        - "entities"
      summary: "Partially update an entity"
      parameters:
        - in: path
          name: id
          schema:
            $ref: "schemas/entity-ref.json"
          required: true
          description: "kind:slug"
          example: "backendapp:developer-portal"
      requestBody:
        description: "operations"
        required: true
        content:
          application/json-patch+json:
            schema:
              type: array
              items:
                type: object
                properties:
                  op:
                    type: string
                    example: "replace"
                    description: "replace or remove"
                  path:
                    type: string
                    example: "/description"
                    description: "path to the attribute"
                  value:
                    type: string
                    example: "This is a description edited"
                    description: "the new value"

      responses:
        "200":
          description: "OK"
          content:
            application/json:
              schema:
                $ref: "schemas/any-entity.read.json"
            application/yaml:
              schema:
                $ref: "schemas/any-entity.read.json"
        "400":
          description: "Invalid Spec"
          content:
            application/json:
              schema:
                type: object
                properties:
                  messages:
                    type: array
                    example: ["failed to patch spec for  ..."]
                    items:
                      type: "string"
                    description: "the error messages"
                  code:
                    type: string
                    example: "INVALID_PARAMETERS"
            application/yaml:
              schema:
                type: object
                properties:
                  messages:
                    type: array
                    example: ["failed to patch spec for  ..."]
                    items:
                      type: "string"
                    description: "the error messages"
                  code:
                    type: string
                    example: "INVALID_PARAMETERS"
        "404":
          description: "Entity not found"
          content:
            application/json:
              schema:
                type: object
                properties:
                  messages:
                    type: array
                    example:
                      ["[handlers] entity group:dev-experience not found"]
                    items:
                      type: "string"
                    description: "the error messages"
                  code:
                    type: string
                    example: "NOT_FOUND"
            application/yaml:
              schema:
                type: object
                properties:
                  messages:
                    type: array
                    example:
                      ["[handlers] entity group:developer-experience not found"]
                    items:
                      type: "string"
                    description: "the error messages"
                  code:
                    type: string
                    example: "NOT_FOUND"
        "500":
          description: "Error"
          content:
            application/json:
              schema:
                type: object
                properties:
                  messages:
                    type: array
                    example:
                      ["ERROR[INTERNAL_SERVER_ERROR] [some error message]"]
                    items:
                      type: "string"
                    description: "the error messages"
                  code:
                    type: string
                    example: "INTERNAL_SERVER_ERROR"
            application/yaml:
              schema:
                type: object
                properties:
                  messages:
                    type: array
                    example:
                      ["ERROR[INTERNAL_SERVER_ERROR] [some error message]"]
                    items:
                      type: "string"
                    description: "the error messages"
                  code:
                    type: string
                    example: "INTERNAL_SERVER_ERROR"
    delete:
      tags:
        - "entities"
      summary: "Archive an entity"
      parameters:
        - in: path
          name: id
          schema:
            $ref: "schemas/entity-ref.json"
          required: true
          description: "kind:slug"
          example: "backendapp:developer-portal"
      responses:
        "204":
          description: "No Content. Archive made OK"
        "404":
          description: "Entity not found"
          content:
            application/json:
              schema:
                type: object
                properties:
                  messages:
                    type: array
                    example:
                      ["[handlers] entity group:developer-experience not found"]
                    items:
                      type: "string"
                    description: "the error messages"
                  code:
                    type: string
                    example: "NOT_FOUND"
            application/yaml:
              schema:
                type: object
                properties:
                  messages:
                    type: array
                    example:
                      ["[handlers] entity group:developer-experience not found"]
                    items:
                      type: "string"
                    description: "the error messages"
                  code:
                    type: string
                    example: "NOT_FOUND"
        "500":
          description: "Error"
          content:
            application/json:
              schema:
                type: object
                properties:
                  messages:
                    type: array
                    example:
                      ["ERROR[INTERNAL_SERVER_ERROR] [some error message]"]
                    items:
                      type: "string"
                    description: "the error messages"
                  code:
                    type: string
                    example: "INTERNAL_SERVER_ERROR"
            application/yaml:
              schema:
                type: object
                properties:
                  messages:
                    type: array
                    example:
                      ["ERROR[INTERNAL_SERVER_ERROR] [some error message]"]
                    items:
                      type: "string"
                    description: "the error messages"
                  code:
                    type: string
                    example: "INTERNAL_SERVER_ERROR"
  /alpha1/entities/news:
    get:
      tags:
        - "entities"
      summary: "Get entities news"
      parameters:
        - in: query
          name: since
          schema:
            type: string
            example: "2022-11-30T18:14:42.849173Z"
          required: false
          description: "timestamp"
        - in: query
          name: cursor
          schema:
            type: string
            example: "MjAyMi0xMi0xNFQxNzoyNzoxMC41NDA4ODZaLGJiNDI5YzUwLTVkZDUtNDhjMC05MWY4LWViZmZjMDg2MDk4Mg=="
          required: false
          description: "cursor"
      responses:
        "200":
          description: "OK"
          content:
            application/json:
              schema:
                $ref: "schemas/news-response.json"
            application/yaml:
              schema:
                $ref: "schemas/news-response.json"
        "400":
          description: "Invalid Parameters"
          content:
            application/json:
              schema:
                type: object
                properties:
                  messages:
                    type: array
                    example:
                      ["'since' query parameter should be valid timestamp  ..."]
                    items:
                      type: "string"
                    description: "the error messages"
                  code:
                    type: string
                    example: "INVALID_PARAMETERS"
        "500":
          description: "Error"
          content:
            application/json:
              schema:
                type: object
                properties:
                  messages:
                    type: array
                    example:
                      ["ERROR[INTERNAL_SERVER_ERROR] [some error message]"]
                    items:
                      type: "string"
                    description: "the error messages"
                  code:
                    type: string
                    example: "INTERNAL_SERVER_ERROR"
            application/yaml:
              schema:
                type: object
                properties:
                  messages:
                    type: array
                    example:
                      ["ERROR[INTERNAL_SERVER_ERROR] [some error message]"]
                    items:
                      type: "string"
                    description: "the error messages"
                  code:
                    type: string
                    example: "INTERNAL_SERVER_ERROR"
  /alpha1/entities:
    get:
      tags:
        - "entities"
      summary: "Search for entitites (paginated)"
      parameters:
        - in: query
          name: filter
          style: form
          schema:
            type: array
            items:
              type: string
          description: "Each filter parameter represents a predicate, which is a set of conditions separated by commas. Conditions within a predicate are composed using the logical AND operator. If multiple filter parameters are provided, they are composed using the logical OR operator, meaning that any of the filters can match for an entity to be included in the search results."
          examples:
            example1:
              summary: "All entities of kind webfrontend"
              value: ["kind=webfrontend"]
            example2:
              summary: "All services that belong to app1"
              value:
                [
                  "kind=service,relationships.type=partof,relationships.target=backendapp:app1",
                ]
            example3:
              summary: "All entities tagged as go or with a label"
              value: ["spec.tags=go", "spec.labels.lang=go"]
        - in: query
          name: cursor
          schema:
            type: string
          required: false
          description: "cursor"
      responses:
        "200":
          description: "OK"
          content:
            application/json:
              schema:
                $ref: "schemas/search-response.json"
            application/yaml:
              schema:
                $ref: "schemas/search-response.json"
        "500":
          description: "Error"
          content:
            application/json:
              schema:
                type: object
                properties:
                  messages:
                    type: array
                    example:
                      ["ERROR[INTERNAL_SERVER_ERROR] [some error message]"]
                    items:
                      type: "string"
                    description: "the error messages"
                  code:
                    type: string
                    example: "INTERNAL_SERVER_ERROR"
            application/yaml:
              schema:
                type: object
                properties:
                  messages:
                    type: array
                    example:
                      ["ERROR[INTERNAL_SERVER_ERROR] [some error message]"]
                    items:
                      type: "string"
                    description: "the error messages"
                  code:
                    type: string
                    example: "INTERNAL_SERVER_ERROR"

externalDocs:
  description: "Find out more about Swagger"
  url: "http://swagger.io"
